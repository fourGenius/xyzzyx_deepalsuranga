/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fourgenius.www.public_access.practicals;

import com.fourgenius.www.public_access.exams.*;
import static com.fourgenius.www.public_access.exams.Jp_add_exams.Jp_add_exams_main_panel;
import static com.fourgenius.www.public_access.exams.Jp_add_exams._bt_add_exam_AddExam;
import static com.fourgenius.www.public_access.exams.Jp_add_exams._bt_add_exam_ExamsDetails;
import com.fourgenius.www.public_access.registration.lecture.*;
import com.fourgenius.www.public_access.model.academic_employee.employee_academic_user_info_name;
import com.fourgenius.www.public_access.model.student.stu_practical_info;
import static com.fourgenius.www.public_access.practicals.Jf_practicals._bt_UserMain_home;
import static com.fourgenius.www.public_access.practicals.Jp_add_practicals.Jp_add_practical_main_panel;
import static com.fourgenius.www.public_access.practicals.Jp_add_practicals._bt_add_practical_AddPractical;
import static com.fourgenius.www.public_access.practicals.Jp_add_practicals._bt_add_practical_practicalDetails;
import static com.fourgenius.www.public_access.registration.lecture.Jp_registration_lecture.Jp_registraion_lecture_main_panel;
import static com.fourgenius.www.public_access.registration.lecture.Jp_registration_lecture._bt_registraion_lecture_buttons_add_lecture;
import static com.fourgenius.www.public_access.registration.lecture.Jp_registration_lecture._bt_registraion_lecture_buttons_preview_lecture;
import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.java.balloontip.BalloonTip;
import public_access.MC_JavaDataBaseConnection;

/**
 *
 * @author Pamitha Gayashan
 */
public class Jp_add_practicals_table_view extends javax.swing.JPanel {

//    DefaultTableModel dtm;
//    TableRowSorter<DefaultTableModel> sorter;
    Border border = BorderFactory.createLineBorder(Color.white, 1);

    public Date getd;

    /**
     * Creates new form Jp_registration_lecture_table_view
     */
    public Jp_add_practicals_table_view() {
        initComponents();
        _bt_update_practical.setEnabled(false);
        _bt_add_marks.setEnabled(false);
        _bt_view_marks.setEnabled(false);
        _bt_finish_practical.setEnabled(false);
        add_active_table_data();
        add_past_exam_data();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        _tp_practical_preview = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        _tb_add_practicals_view_active_practicals_table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        _tb_add_practicals_view_past_practicals_table = new javax.swing.JTable();
        _bt_view_marks = new javax.swing.JButton();
        _bt_add_marks = new javax.swing.JButton();
        _bt_update_practical = new javax.swing.JButton();
        _bt_finish_practical = new javax.swing.JButton();

        setBackground(new java.awt.Color(66, 66, 66));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new java.awt.CardLayout());

        _tp_practical_preview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _tp_practical_previewMouseClicked(evt);
            }
        });

        _tb_add_practicals_view_active_practicals_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Practical ID", "Practical Name", "Batch Number", "Course", "Date", "Branch"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        _tb_add_practicals_view_active_practicals_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _tb_add_practicals_view_active_practicals_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(_tb_add_practicals_view_active_practicals_table);

        _tp_practical_preview.addTab("Active Practicals", jScrollPane1);

        _tb_add_practicals_view_past_practicals_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Practical ID", "Practical Name", "Batch Number", "Course", "Date", "Branch"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        _tb_add_practicals_view_past_practicals_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _tb_add_practicals_view_past_practicals_tableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(_tb_add_practicals_view_past_practicals_table);

        _tp_practical_preview.addTab("Past Practicals", jScrollPane2);

        jPanel1.add(_tp_practical_preview, "card2");

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 1310, 540));

        _bt_view_marks.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        _bt_view_marks.setForeground(new java.awt.Color(255, 255, 255));
        _bt_view_marks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fourgenius/www/public_access/user/login/images_butons/buton_blue_200x50.png"))); // NOI18N
        _bt_view_marks.setText("View Marks");
        _bt_view_marks.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        _bt_view_marks.setFocusPainted(false);
        _bt_view_marks.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _bt_view_marks.setPreferredSize(new java.awt.Dimension(200, 50));
        _bt_view_marks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _bt_view_marksMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                _bt_view_marksMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                _bt_view_marksMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _bt_view_marksMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                _bt_view_marksMouseReleased(evt);
            }
        });
        _bt_view_marks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _bt_view_marksActionPerformed(evt);
            }
        });
        add(_bt_view_marks, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 560, 200, -1));

        _bt_add_marks.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        _bt_add_marks.setForeground(new java.awt.Color(255, 255, 255));
        _bt_add_marks.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fourgenius/www/public_access/user/login/images_butons/buton_blue_200x50.png"))); // NOI18N
        _bt_add_marks.setText("Add Marks");
        _bt_add_marks.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        _bt_add_marks.setFocusPainted(false);
        _bt_add_marks.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _bt_add_marks.setPreferredSize(new java.awt.Dimension(200, 50));
        _bt_add_marks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _bt_add_marksMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                _bt_add_marksMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                _bt_add_marksMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _bt_add_marksMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                _bt_add_marksMouseReleased(evt);
            }
        });
        _bt_add_marks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _bt_add_marksActionPerformed(evt);
            }
        });
        add(_bt_add_marks, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 560, 200, -1));

        _bt_update_practical.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        _bt_update_practical.setForeground(new java.awt.Color(255, 255, 255));
        _bt_update_practical.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fourgenius/www/public_access/user/login/images_butons/buton_blue_200x50.png"))); // NOI18N
        _bt_update_practical.setText("Update Practical");
        _bt_update_practical.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        _bt_update_practical.setFocusPainted(false);
        _bt_update_practical.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _bt_update_practical.setPreferredSize(new java.awt.Dimension(200, 50));
        _bt_update_practical.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                _bt_update_practicalMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                _bt_update_practicalMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _bt_update_practicalMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                _bt_update_practicalMouseReleased(evt);
            }
        });
        _bt_update_practical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _bt_update_practicalActionPerformed(evt);
            }
        });
        add(_bt_update_practical, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 560, 200, -1));

        _bt_finish_practical.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        _bt_finish_practical.setForeground(new java.awt.Color(255, 255, 255));
        _bt_finish_practical.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fourgenius/www/public_access/user/login/images_butons/buton_blue_200x50.png"))); // NOI18N
        _bt_finish_practical.setText("Finish Practical");
        _bt_finish_practical.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        _bt_finish_practical.setFocusPainted(false);
        _bt_finish_practical.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        _bt_finish_practical.setPreferredSize(new java.awt.Dimension(200, 50));
        _bt_finish_practical.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _bt_finish_practicalMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                _bt_finish_practicalMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                _bt_finish_practicalMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                _bt_finish_practicalMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                _bt_finish_practicalMouseReleased(evt);
            }
        });
        _bt_finish_practical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _bt_finish_practicalActionPerformed(evt);
            }
        });
        add(_bt_finish_practical, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 560, 200, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void _tb_add_practicals_view_active_practicals_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__tb_add_practicals_view_active_practicals_tableMouseClicked
        _bt_update_practical.setEnabled(true);
        _bt_add_marks.setEnabled(true);
        _bt_view_marks.setEnabled(true);
        _bt_finish_practical.setEnabled(true);
    }//GEN-LAST:event__tb_add_practicals_view_active_practicals_tableMouseClicked

    private void _tb_add_practicals_view_past_practicals_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__tb_add_practicals_view_past_practicals_tableMouseClicked
        _bt_add_marks.setEnabled(true);
        _bt_view_marks.setEnabled(true);
    }//GEN-LAST:event__tb_add_practicals_view_past_practicals_tableMouseClicked

    private void _tp_practical_previewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__tp_practical_previewMouseClicked
        int index = _tp_practical_preview.getSelectedIndex();
        if (index == 1) {
            _bt_update_practical.setEnabled(false);
            _bt_add_marks.setEnabled(false);
            _bt_finish_practical.setEnabled(false);
            _bt_view_marks.setEnabled(false);
            _tb_add_practicals_view_active_practicals_table.setSelectionMode(0);
        } else {
            _bt_update_practical.setEnabled(false);
            _bt_add_marks.setEnabled(false);
            _bt_finish_practical.setEnabled(false);
            _bt_view_marks.setEnabled(false);
            _tb_add_practicals_view_past_practicals_table.setSelectionMode(0);
        }
    }//GEN-LAST:event__tp_practical_previewMouseClicked

    private void _bt_view_marksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_view_marksMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event__bt_view_marksMouseClicked

    private void _bt_view_marksMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_view_marksMouseEntered
        _bt_view_marks.setBorder(border);
    }//GEN-LAST:event__bt_view_marksMouseEntered

    private void _bt_view_marksMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_view_marksMouseExited
        _bt_view_marks.setBorder(null);
    }//GEN-LAST:event__bt_view_marksMouseExited

    private void _bt_view_marksMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_view_marksMousePressed
        _bt_view_marks.setBorder(border);
    }//GEN-LAST:event__bt_view_marksMousePressed

    private void _bt_view_marksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_view_marksMouseReleased
        _bt_view_marks.setBorder(null);
    }//GEN-LAST:event__bt_view_marksMouseReleased

    private void _bt_view_marksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__bt_view_marksActionPerformed
        try {
            int index = _tp_practical_preview.getSelectedIndex();
            if (index == 0) {
                DefaultTableModel dtm = (DefaultTableModel) _tb_add_practicals_view_active_practicals_table.getModel();
                int row = _tb_add_practicals_view_active_practicals_table.getSelectedRow();
                String batch = dtm.getValueAt(row, 2).toString();
                String course = dtm.getValueAt(row, 3).toString();
                String branch = dtm.getValueAt(row, 5).toString();
                String id = dtm.getValueAt(row, 0).toString();
                String name = dtm.getValueAt(row, 1).toString();
                String date = dtm.getValueAt(row, 4).toString();

                Jp_view_practical_result view_marks = new Jp_view_practical_result(batch, course, branch, id, name, date);
                if (view_marks == null) {
                    Jp_add_practical_main_panel.removeAll();
                    revalidate();
                    view_marks = new Jp_view_practical_result(batch, course, branch, id, name, date);
                    view_marks.setVisible(true);
                    Jp_add_practical_main_panel.add(view_marks);
                    revalidate();
                } else {
                    Jp_add_practical_main_panel.removeAll();
                    revalidate();
                    view_marks.setVisible(true);
                    Jp_add_practical_main_panel.add(view_marks);
                    revalidate();
                }
                _bt_add_practical_AddPractical.setText("Cancel");
                _bt_UserMain_home.setEnabled(false);
                _bt_add_practical_practicalDetails.setEnabled(false);
            } else {
                DefaultTableModel dtm = (DefaultTableModel) _tb_add_practicals_view_past_practicals_table.getModel();
                int row = _tb_add_practicals_view_past_practicals_table.getSelectedRow();
                String batch = dtm.getValueAt(row, 2).toString();
                String course = dtm.getValueAt(row, 3).toString();
                String branch = dtm.getValueAt(row, 5).toString();
                String id = dtm.getValueAt(row, 0).toString();
                String name = dtm.getValueAt(row, 1).toString();
                String date = dtm.getValueAt(row, 4).toString();

                Jp_view_practical_result view_marks = new Jp_view_practical_result(batch, course, branch, id, name, date);
                if (view_marks == null) {
                    Jp_add_practical_main_panel.removeAll();
                    revalidate();
                    view_marks = new Jp_view_practical_result(batch, course, branch, id, name, date);
                    view_marks.setVisible(true);
                    Jp_add_practical_main_panel.add(view_marks);
                    revalidate();
                } else {
                    Jp_add_practical_main_panel.removeAll();
                    revalidate();
                    view_marks.setVisible(true);
                    Jp_add_practical_main_panel.add(view_marks);
                    revalidate();
                }
                _bt_add_practical_AddPractical.setText("Cancel");
                _bt_UserMain_home.setEnabled(false);
                _bt_add_practical_practicalDetails.setEnabled(false);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event__bt_view_marksActionPerformed

    private void _bt_add_marksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_add_marksMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event__bt_add_marksMouseClicked

    private void _bt_add_marksMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_add_marksMouseEntered
        _bt_add_marks.setBorder(border);
    }//GEN-LAST:event__bt_add_marksMouseEntered

    private void _bt_add_marksMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_add_marksMouseExited
        _bt_add_marks.setBorder(null);
    }//GEN-LAST:event__bt_add_marksMouseExited

    private void _bt_add_marksMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_add_marksMousePressed
        _bt_add_marks.setBorder(null);
    }//GEN-LAST:event__bt_add_marksMousePressed

    private void _bt_add_marksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_add_marksMouseReleased
        _bt_add_marks.setBorder(border);
    }//GEN-LAST:event__bt_add_marksMouseReleased

    private void _bt_add_marksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__bt_add_marksActionPerformed
        try {
            int index = _tp_practical_preview.getSelectedIndex();
            if (index == 0) {
                DefaultTableModel dtm = (DefaultTableModel) _tb_add_practicals_view_active_practicals_table.getModel();
                int row = _tb_add_practicals_view_active_practicals_table.getSelectedRow();
                String batch = dtm.getValueAt(row, 2).toString();
                String course = dtm.getValueAt(row, 3).toString();
                String branch = dtm.getValueAt(row, 5).toString();
                String id = dtm.getValueAt(row, 0).toString();
                String name = dtm.getValueAt(row, 1).toString();

                Jp_add_practical_student_marks add_marks = new Jp_add_practical_student_marks(batch, course, branch, id, name);
                if (add_marks == null) {
                    Jp_add_practical_main_panel.removeAll();
                    revalidate();
                    add_marks = new Jp_add_practical_student_marks(batch, course, branch, id, name);
                    add_marks.setVisible(true);
                    Jp_add_practical_main_panel.add(add_marks);
                    revalidate();
                } else {
                    Jp_add_practical_main_panel.removeAll();
                    revalidate();
                    add_marks.setVisible(true);
                    Jp_add_practical_main_panel.add(add_marks);
                    revalidate();
                }
                _bt_add_practical_AddPractical.setText("Cancel");
                _bt_UserMain_home.setEnabled(false);
                _bt_add_practical_practicalDetails.setEnabled(false);
            } else {
                DefaultTableModel dtm = (DefaultTableModel) _tb_add_practicals_view_past_practicals_table.getModel();
                int row = _tb_add_practicals_view_past_practicals_table.getSelectedRow();
                String batch = dtm.getValueAt(row, 2).toString();
                String course = dtm.getValueAt(row, 3).toString();
                String branch = dtm.getValueAt(row, 5).toString();
                String id = dtm.getValueAt(row, 0).toString();
                String name = dtm.getValueAt(row, 1).toString();

                Jp_add_practical_student_marks add_marks = new Jp_add_practical_student_marks(batch, course, branch, id, name);
                if (add_marks == null) {
                    Jp_add_practical_main_panel.removeAll();
                    revalidate();
                    add_marks = new Jp_add_practical_student_marks(batch, course, branch, id, name);
                    add_marks.setVisible(true);
                    Jp_add_practical_main_panel.add(add_marks);
                    revalidate();
                } else {
                    Jp_add_practical_main_panel.removeAll();
                    revalidate();
                    add_marks.setVisible(true);
                    Jp_add_practical_main_panel.add(add_marks);
                    revalidate();
                }
                _bt_add_practical_AddPractical.setText("Cancel");
                _bt_UserMain_home.setEnabled(false);
                _bt_add_practical_practicalDetails.setEnabled(false);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event__bt_add_marksActionPerformed

    private void _bt_update_practicalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_update_practicalMouseEntered
        _bt_update_practical.setBorder(border);
    }//GEN-LAST:event__bt_update_practicalMouseEntered

    private void _bt_update_practicalMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_update_practicalMouseExited
        _bt_update_practical.setBorder(null);
    }//GEN-LAST:event__bt_update_practicalMouseExited

    private void _bt_update_practicalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_update_practicalMousePressed
        _bt_update_practical.setBorder(null);
    }//GEN-LAST:event__bt_update_practicalMousePressed

    private void _bt_update_practicalMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_update_practicalMouseReleased
        _bt_update_practical.setBorder(border);
    }//GEN-LAST:event__bt_update_practicalMouseReleased

    private void _bt_update_practicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__bt_update_practicalActionPerformed
        update_selected_exam();
        _bt_UserMain_home.setEnabled(false);
    }//GEN-LAST:event__bt_update_practicalActionPerformed

    private void _bt_finish_practicalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_finish_practicalMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event__bt_finish_practicalMouseClicked

    private void _bt_finish_practicalMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_finish_practicalMouseEntered
        _bt_finish_practical.setBorder(border);
    }//GEN-LAST:event__bt_finish_practicalMouseEntered

    private void _bt_finish_practicalMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_finish_practicalMouseExited
        _bt_finish_practical.setBorder(null);
    }//GEN-LAST:event__bt_finish_practicalMouseExited

    private void _bt_finish_practicalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_finish_practicalMousePressed
        _bt_finish_practical.setBorder(border);
    }//GEN-LAST:event__bt_finish_practicalMousePressed

    private void _bt_finish_practicalMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__bt_finish_practicalMouseReleased
        _bt_finish_practical.setBorder(null);
    }//GEN-LAST:event__bt_finish_practicalMouseReleased

    private void _bt_finish_practicalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__bt_finish_practicalActionPerformed
        try {
            DefaultTableModel activedtm = (DefaultTableModel) _tb_add_practicals_view_active_practicals_table.getModel();
            DefaultTableModel pastdtm = (DefaultTableModel) _tb_add_practicals_view_past_practicals_table.getModel();
            int raw = _tb_add_practicals_view_active_practicals_table.getSelectedRow();
            String id = activedtm.getValueAt(raw, 0).toString();

            Connection c = MC_JavaDataBaseConnection.myConnection();
            Statement s = c.createStatement();
            ResultSet rs = s.executeQuery("SELECT stu_practical_info_date FROM stu_practical_info WHERE stu_practical_info_id='" + id + "'");
            if (rs.next()) {
                getd = rs.getDate("stu_practical_info_date");
            }

            Date d = Calendar.getInstance().getTime();

            if (getd.after(d)) {
                JOptionPane.showMessageDialog(this, "This Practical is not Complete");
            } else {
                int option = JOptionPane.showConfirmDialog(this, "Are You Sure?", "Confirm?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (option == JOptionPane.YES_OPTION) {
                    stu_practical_info set_type = new stu_practical_info(id);
                    set_type.setStu_practical_info_type(id);
                    activedtm.setRowCount(0);
                    pastdtm.setRowCount(0);
                    add_active_table_data();
                    add_past_exam_data();
                    _bt_update_practical.setEnabled(false);
                    _bt_add_marks.setEnabled(false);
                    _bt_finish_practical.setEnabled(false);
                    _bt_view_marks.setEnabled(false);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event__bt_finish_practicalActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton _bt_add_marks;
    private javax.swing.JButton _bt_finish_practical;
    private javax.swing.JButton _bt_update_practical;
    private javax.swing.JButton _bt_view_marks;
    private javax.swing.JTable _tb_add_practicals_view_active_practicals_table;
    private javax.swing.JTable _tb_add_practicals_view_past_practicals_table;
    private javax.swing.JTabbedPane _tp_practical_preview;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void add_active_table_data() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) _tb_add_practicals_view_active_practicals_table.getModel();

            Connection c = MC_JavaDataBaseConnection.myConnection();
            Statement s = c.createStatement();
            String search_query = "SELECT stu_practical_info_id,stu_practical_info_name,stu_practical_info_date,stu_practical_info_branch,stu_practical_info_batch,stu_practical_info_course FROM stu_practical_info WHERE stu_practical_info_type = '1'";
            ResultSet rs = s.executeQuery(search_query);
            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString("stu_practical_info_id"));
                v.add(rs.getString("stu_practical_info_name"));
                v.add(rs.getString("stu_practical_info_batch"));
                v.add(rs.getString("stu_practical_info_course"));
                v.add(rs.getString("stu_practical_info_date"));
                v.add(rs.getString("stu_practical_info_branch"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void add_past_exam_data() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) _tb_add_practicals_view_past_practicals_table.getModel();

            Connection c = MC_JavaDataBaseConnection.myConnection();
            Statement s = c.createStatement();
            String search_query = "SELECT stu_practical_info_id,stu_practical_info_name,stu_practical_info_date,stu_practical_info_branch,stu_practical_info_batch,stu_practical_info_course FROM stu_practical_info WHERE stu_practical_info_type = '0'";
            ResultSet rs = s.executeQuery(search_query);
            while (rs.next()) {
                Vector v = new Vector();
                v.add(rs.getString("stu_practical_info_id"));
                v.add(rs.getString("stu_practical_info_name"));
                v.add(rs.getString("stu_practical_info_batch"));
                v.add(rs.getString("stu_practical_info_course"));
                v.add(rs.getString("stu_practical_info_date"));
                v.add(rs.getString("stu_practical_info_branch"));
                dtm.addRow(v);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void update_selected_exam() {
        try {
            DefaultTableModel dtm = (DefaultTableModel) _tb_add_practicals_view_active_practicals_table.getModel();
            int row = _tb_add_practicals_view_active_practicals_table.getSelectedRow();
            String prc_id = dtm.getValueAt(row, 0).toString();

            Jp_add_practical_informations update_prc = new Jp_add_practical_informations(prc_id);
            if (update_prc == null) {
                Jp_add_practical_main_panel.removeAll();
                revalidate();
                update_prc = new Jp_add_practical_informations(prc_id);
                update_prc.setVisible(true);
                Jp_add_practical_main_panel.add(update_prc);
                revalidate();
            } else {
                Jp_add_practical_main_panel.removeAll();
                revalidate();
                update_prc.setVisible(true);
                Jp_add_practical_main_panel.add(update_prc);
                revalidate();
            }
            _bt_add_practical_AddPractical.setText("Cancel");
            _bt_add_practical_practicalDetails.setEnabled(false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
