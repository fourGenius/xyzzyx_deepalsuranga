/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fourgenius.www.public_access.inventory;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import public_access.MC_JavaDataBaseConnection;

/**
 *
 * @author Dineth
 */
public class grn extends javax.swing.JPanel {

    String item;
    String qt;
    double avbqty;

    public grn() {
        initComponents();
        suplierNameSearch.setVisible(false);
        SGrnId.setVisible(false);

        loadGrnId();
        loadDateAndTime();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bal = new javax.swing.JTextField();
        Dis = new javax.swing.JTextField();
        pay = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        SGrnId = new javax.swing.JScrollPane();
        sGrnId = new javax.swing.JList();
        sGgrnIdSearch = new javax.swing.JTextField();
        clear = new javax.swing.JButton();
        find = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lb_date_view = new javax.swing.JTextField();
        supliername = new javax.swing.JTextField();
        suplierNameSearch = new javax.swing.JScrollPane();
        SuplierNameSearch = new javax.swing.JList();
        id = new javax.swing.JTextField();
        net = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        sub = new javax.swing.JTextField();
        lb_time_date = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        itemNo = new javax.swing.JTextField();
        ItemName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        qty = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        suplierId = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(2, 119, 189));
        setMaximumSize(new java.awt.Dimension(1276, 651));
        setMinimumSize(new java.awt.Dimension(1276, 651));
        setPreferredSize(new java.awt.Dimension(1276, 651));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bal.setEditable(false);
        bal.setMaximumSize(new java.awt.Dimension(308, 20));
        bal.setMinimumSize(new java.awt.Dimension(308, 20));
        bal.setPreferredSize(new java.awt.Dimension(200, 30));
        bal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balActionPerformed(evt);
            }
        });
        add(bal, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 553, 308, -1));

        Dis.setMaximumSize(new java.awt.Dimension(210, 20));
        Dis.setMinimumSize(new java.awt.Dimension(210, 20));
        Dis.setPreferredSize(new java.awt.Dimension(200, 30));
        Dis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisActionPerformed(evt);
            }
        });
        Dis.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DisKeyTyped(evt);
            }
        });
        add(Dis, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 510, 210, -1));

        pay.setMaximumSize(new java.awt.Dimension(210, 20));
        pay.setMinimumSize(new java.awt.Dimension(210, 20));
        pay.setPreferredSize(new java.awt.Dimension(200, 30));
        pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payActionPerformed(evt);
            }
        });
        pay.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                payKeyTyped(evt);
            }
        });
        add(pay, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 550, 210, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Supplier's Name");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, -1, -1));

        jPanel3.setBackground(new java.awt.Color(2, 119, 189));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "FIND GRN", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("GRN ID");
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        sGrnId.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        sGrnId.setAlignmentY(2.0F);
        sGrnId.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sGrnId.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        sGrnId.setVisibleRowCount(0);
        sGrnId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sGrnIdMouseClicked(evt);
            }
        });
        sGrnId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sGrnIdKeyReleased(evt);
            }
        });
        SGrnId.setViewportView(sGrnId);

        jPanel3.add(SGrnId, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 230, 60));

        sGgrnIdSearch.setMaximumSize(new java.awt.Dimension(230, 20));
        sGgrnIdSearch.setMinimumSize(new java.awt.Dimension(230, 20));
        sGgrnIdSearch.setPreferredSize(new java.awt.Dimension(230, 20));
        sGgrnIdSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sGgrnIdSearchKeyReleased(evt);
            }
        });
        jPanel3.add(sGgrnIdSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 230, 30));

        clear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        clear.setForeground(new java.awt.Color(255, 255, 255));
        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fourgenius/www/public_access/user/login/images_butons/buton_blue_100x50.png"))); // NOI18N
        clear.setText("Clear");
        clear.setBorderPainted(false);
        clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear.setFocusPainted(false);
        clear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clear.setMaximumSize(new java.awt.Dimension(100, 50));
        clear.setMinimumSize(new java.awt.Dimension(100, 50));
        clear.setPreferredSize(new java.awt.Dimension(100, 50));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        jPanel3.add(clear, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, -1, -1));

        find.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        find.setForeground(new java.awt.Color(255, 255, 255));
        find.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/fourgenius/www/public_access/user/login/images_butons/buton_blue_100x50.png"))); // NOI18N
        find.setText("Find");
        find.setBorderPainted(false);
        find.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        find.setFocusPainted(false);
        find.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        find.setMaximumSize(new java.awt.Dimension(100, 50));
        find.setMinimumSize(new java.awt.Dimension(100, 50));
        find.setPreferredSize(new java.awt.Dimension(100, 50));
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });
        jPanel3.add(find, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 100, -1, -1));

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 430, 400, 160));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Sub Total");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 465, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Net Amount");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 507, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("GRN ID");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 80, -1, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Balance");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 549, -1, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Discount");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 510, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("GRN Date");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 40, -1, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Payment");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 550, -1, -1));

        lb_date_view.setEditable(false);
        lb_date_view.setPreferredSize(new java.awt.Dimension(100, 30));
        add(lb_date_view, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 40, 260, -1));

        supliername.setMaximumSize(new java.awt.Dimension(170, 20));
        supliername.setMinimumSize(new java.awt.Dimension(170, 20));
        supliername.setPreferredSize(new java.awt.Dimension(100, 30));
        supliername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                supliernameFocusLost(evt);
            }
        });
        supliername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supliernameActionPerformed(evt);
            }
        });
        supliername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                supliernameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                supliernameKeyTyped(evt);
            }
        });
        add(supliername, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 330, -1));

        SuplierNameSearch.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        SuplierNameSearch.setAlignmentY(2.0F);
        SuplierNameSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SuplierNameSearch.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        SuplierNameSearch.setPreferredSize(new java.awt.Dimension(100, 30));
        SuplierNameSearch.setVisibleRowCount(0);
        SuplierNameSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SuplierNameSearchMouseClicked(evt);
            }
        });
        SuplierNameSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SuplierNameSearchKeyReleased(evt);
            }
        });
        suplierNameSearch.setViewportView(SuplierNameSearch);

        add(suplierNameSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 70, 330, 70));

        id.setMaximumSize(new java.awt.Dimension(170, 20));
        id.setMinimumSize(new java.awt.Dimension(170, 20));
        id.setPreferredSize(new java.awt.Dimension(200, 30));
        add(id, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 330, -1));

        net.setEditable(false);
        net.setMaximumSize(new java.awt.Dimension(308, 20));
        net.setMinimumSize(new java.awt.Dimension(308, 20));
        net.setPreferredSize(new java.awt.Dimension(200, 30));
        add(net, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 511, 308, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("GRN Time");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 90, -1, -1));

        sub.setEditable(false);
        sub.setMaximumSize(new java.awt.Dimension(308, 20));
        sub.setMinimumSize(new java.awt.Dimension(308, 20));
        sub.setPreferredSize(new java.awt.Dimension(200, 30));
        add(sub, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 469, 308, -1));

        lb_time_date.setEditable(false);
        lb_time_date.setPreferredSize(new java.awt.Dimension(100, 30));
        add(lb_time_date, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 80, 259, -1));

        jPanel1.setBackground(new java.awt.Color(2, 119, 189));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Item No");

        itemNo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        itemNo.setMaximumSize(new java.awt.Dimension(171, 20));
        itemNo.setMinimumSize(new java.awt.Dimension(171, 20));
        itemNo.setPreferredSize(null);
        itemNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNoActionPerformed(evt);
            }
        });
        itemNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemNoKeyReleased(evt);
            }
        });

        ItemName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ItemName.setMaximumSize(new java.awt.Dimension(483, 20));
        ItemName.setMinimumSize(new java.awt.Dimension(483, 20));
        ItemName.setPreferredSize(null);
        ItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemNameActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Price");

        price.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        price.setMaximumSize(new java.awt.Dimension(156, 20));
        price.setMinimumSize(new java.awt.Dimension(156, 20));
        price.setPreferredSize(null);
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });
        price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("QTY");

        qty.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        qty.setMaximumSize(new java.awt.Dimension(168, 20));
        qty.setMinimumSize(new java.awt.Dimension(168, 20));
        qty.setPreferredSize(null);
        qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyActionPerformed(evt);
            }
        });
        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Total");

        total.setEditable(false);
        total.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        total.setPreferredSize(null);
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item No", "Name", "Price", "QTY", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Item Name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(itemNo, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel15)
                                .addGap(201, 201, 201)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(jLabel7)
                                .addGap(146, 146, 146)
                                .addComponent(jLabel8)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(120, 120, 120)
                                .addComponent(jLabel9))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemNo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 113, -1, 320));

        suplierId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        suplierId.setForeground(new java.awt.Color(255, 255, 255));
        suplierId.setText("suplier_Id");
        add(suplierId, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 50, 120, 20));

        jPanel2.setBackground(new java.awt.Color(13, 71, 161));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Good Recive Note");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1096, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void supliernameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_supliernameKeyReleased
        try {

            ResultSet rs = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select fname from inv_suplier where fname like '" + supliername.getText() + "%' and state='Active'");
            Vector v = new Vector();

            if (supliername.getText().isEmpty()) {
                suplierNameSearch.setVisible(false);
                suplierId.setText(null);
            } else {
                while (rs.next()) {
                    v.add(rs.getString("fname"));

                }
                rs.close();
                SuplierNameSearch.setListData(v);

                if (SuplierNameSearch.getModel().getSize() == 0) {
                    suplierNameSearch.setVisible(false);

                } else {
                    suplierNameSearch.setVisible(true);
                }

            }
            if (evt.getKeyCode() == 40) {

                suplierNameSearch.setVisible(true);
                SuplierNameSearch.grabFocus();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_supliernameKeyReleased

    private void supliernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supliernameActionPerformed
        try {
            ResultSet rs = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select id from inv_suplier where fname='" + supliername.getText() + "'");
            if (rs.next()) {
                suplierId.setText(rs.getString("id"));
                suplierNameSearch.setVisible(false);
                itemNo.grabFocus();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_supliernameActionPerformed

    private void SuplierNameSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SuplierNameSearchMouseClicked
        try {
            supliername.setText(SuplierNameSearch.getSelectedValue().toString());
            ResultSet rs = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select id from inv_suplier where fname='" + SuplierNameSearch.getSelectedValue().toString() + "'");
            if (rs.next()) {
                suplierId.setText(rs.getString("id"));
                suplierNameSearch.setVisible(false);
                itemNo.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_SuplierNameSearchMouseClicked

    private void supliernameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_supliernameKeyTyped

    }//GEN-LAST:event_supliernameKeyTyped

    private void SuplierNameSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SuplierNameSearchKeyReleased
        if (evt.getKeyCode() == 10) {
            System.out.println("ok");
            try {
                supliername.setText(SuplierNameSearch.getSelectedValue().toString());
                ResultSet rs1 = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select id from inv_suplier where fname='" + SuplierNameSearch.getSelectedValue().toString() + "'");
                if (rs1.next()) {
                    suplierId.setText(rs1.getString("id"));
                    suplierNameSearch.setVisible(false);
                    itemNo.grabFocus();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_SuplierNameSearchKeyReleased

    private void supliernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_supliernameFocusLost

    }//GEN-LAST:event_supliernameFocusLost

    private void itemNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNoActionPerformed

        try {
            ResultSet rs = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select itemname from inv_stock where itemid='" + itemNo.getText() + "'");
            if (rs.next()) {
                ItemName.setText(rs.getString("itemname"));

            } else {
                ItemName.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_itemNoActionPerformed

    private void ItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemNameActionPerformed

    }//GEN-LAST:event_ItemNameActionPerformed

    private void madeDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_madeDateMouseClicked

    }//GEN-LAST:event_madeDateMouseClicked

    private void expDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_expDateMouseClicked

    }//GEN-LAST:event_expDateMouseClicked

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        qty.grabFocus();
    }//GEN-LAST:event_priceActionPerformed

    private void qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyActionPerformed
        try {
            double pri = Double.parseDouble(price.getText());
            double q = Double.parseDouble(qty.getText());
            total.setText((pri * q) + "");
            total.grabFocus();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Price or Qty is empty");
            int ok = JOptionPane.OK_OPTION;
            if (ok == JOptionPane.OK_OPTION) {
                if (price.getText().isEmpty()) {
                    price.grabFocus();
                } else {
                    qty.grabFocus();
                }
            }
        }

    }//GEN-LAST:event_qtyActionPerformed

    private void expDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_expDatePropertyChange
        price.grabFocus();
    }//GEN-LAST:event_expDatePropertyChange

    private void priceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceKeyReleased
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_priceKeyReleased

    private void qtyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyReleased

    }//GEN-LAST:event_qtyKeyReleased

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
        addTable();
    }//GEN-LAST:event_totalActionPerformed

    private void itemNoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemNoKeyReleased
        if (evt.getKeyCode() == evt.VK_F4) {
            pay.grabFocus();
        }
        if (evt.getKeyCode() == evt.VK_F5) {
            Dis.grabFocus();
        }
    }//GEN-LAST:event_itemNoKeyReleased

    private void DisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisActionPerformed
        try {
            double d1 = Double.parseDouble(sub.getText());
            double d2;
            if (!Dis.getText().isEmpty()) {
                d2 = Double.parseDouble(Dis.getText());
            } else {
                d2 = 0;
                Dis.setText("" + 0);
            }
            double d = d1 - (d1 * d2 / 100);
            net.setText("" + d);
            pay.grabFocus();
            if (Dis.getText().equals("100")) {
                JOptionPane.showMessageDialog(this, "You can't give this discount..", "Error", JOptionPane.ERROR_MESSAGE);
                Dis.setText(null);
            }
        } catch (Exception e) {
//             JOptionPane.showMessageDialog(this, "Add items...");
//            if (supliername.getText().isEmpty()) {
//                supliername.grabFocus();
//            }
//            else{
//            itemNo.grabFocus();
//            }
        }
    }//GEN-LAST:event_DisActionPerformed

    private void payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payActionPerformed
        try {
            if (net.getText().isEmpty()) {
                net.setText(sub.getText());
            }
            double d1 = Double.parseDouble(net.getText());
            double d2 = Double.parseDouble(pay.getText());
            double d = d2 - d1;
            bal.setText("" + d);
            if (d >= 0) {
                bal.grabFocus();
            }
        } catch (Exception e) {
//             JOptionPane.showMessageDialog(this, "Add items...");
//            if (supliername.getText().isEmpty()) {
//                supliername.grabFocus();
//            }
//            else{
//            itemNo.grabFocus();
//            }
        }
    }//GEN-LAST:event_payActionPerformed

    private void balActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balActionPerformed
         try {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            MC_JavaDataBaseConnection.myConnection().createStatement().executeUpdate("insert into inv_grn(id,date,total,time,discount,nettot,supliername,suplierid,bal,payment) values('" + id.getText() + "','" + lb_date_view.getText() + "','" + sub.getText() + "','" + lb_time_date.getText() + "','" + Dis.getText() + "','" + net.getText() + "','" + supliername.getText() + "','" + suplierId.getText() + "','" + bal.getText() + "','" + pay.getText() + "')");
            Date d=new Date();
            SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
            String grnId = id.getText();
            String date=sdf.format(d);
            for (int i = 0; i < dtm.getRowCount(); i++) {

                ResultSet rs = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select * from inv_stock where itemid='" + dtm.getValueAt(i, 0) + "'");
                if (rs.next()) {

                MC_JavaDataBaseConnection.myConnection().createStatement().executeUpdate("update inv_stock set qty=qty+'" + dtm.getValueAt(i, 3) + "',itemprice='"+dtm.getValueAt(i, 2)+"',date='"+date+"' where itemid='" + dtm.getValueAt(i, 0) + "'");
                    
                } else {
                System.out.println("else");
                     MC_JavaDataBaseConnection.myConnection().createStatement().executeUpdate("insert into inv_stock(qty,itemprice) values('" + dtm.getValueAt(i, 3) + "','" + dtm.getValueAt(i, 2) + "')");

                }
                rs.close();
                MC_JavaDataBaseConnection.myConnection().createStatement().executeUpdate("insert into inv_grnreg (itemid,item,itemprice,qty,subtot,grnid) values('" + dtm.getValueAt(i, 0) + "','" + dtm.getValueAt(i, 1) + "','" + dtm.getValueAt(i, 2) + "','" + dtm.getValueAt(i, 3) + "','" + dtm.getValueAt(i, 4) + "','" + grnId + "')");

            }
            String path = "src//reports//grn.jrxml";
            JasperReport compileReport = JasperCompileManager.compileReport(path);
            Map<String, Object> m = new HashMap<String, Object>();

            m.put("id", id.getText());

            JasperPrint jp = JasperFillManager.fillReport(compileReport, m, MC_JavaDataBaseConnection.myConnection());
            JasperViewer.viewReport(jp, false);
            // JasperPrintManager.printReport(jp, true);
        } catch (Exception e) {
            e.printStackTrace();
        }
        clearAll();
    }//GEN-LAST:event_balActionPerformed

    private void sGgrnIdSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sGgrnIdSearchKeyReleased
        try {

            ResultSet rs = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select id,CONVERT(SUBSTRING_INDEX(id,'GRN',-1),UNSIGNED INTEGER) as newid from inv_grn where id like '%" + sGgrnIdSearch.getText() + "%' ORDER BY newid");
            Vector v = new Vector();

            if (sGgrnIdSearch.getText().isEmpty()) {
                SGrnId.setVisible(false);

            } else {
                while (rs.next()) {
                    v.add(rs.getString("id"));

                }
                rs.close();
                sGrnId.setListData(v);

                if (sGrnId.getModel().getSize() == 0) {
                    SGrnId.setVisible(false);

                } else {
                    SGrnId.setVisible(true);

                }

            }
            if (evt.getKeyCode() == 40) {

                SGrnId.setVisible(true);
                SGrnId.grabFocus();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_sGgrnIdSearchKeyReleased

    private void sGrnIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sGrnIdKeyReleased
        if (evt.getKeyCode() == 10) {
            System.out.println("ok");
            try {
                sGgrnIdSearch.setText(sGrnId.getSelectedValue().toString());
                SGrnId.setVisible(false);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_sGrnIdKeyReleased

    private void sGrnIdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sGrnIdMouseClicked

        try {
            sGgrnIdSearch.setText(sGrnId.getSelectedValue().toString());
            SGrnId.setVisible(false);

        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_sGrnIdMouseClicked

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (evt.getKeyCode() == 114) {
            DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
            int i = jTable1.getSelectedRow();
            dtm.removeRow(i);
        }
    }//GEN-LAST:event_jTable1KeyReleased

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        itemNo.setText(null);
        qty.setText(null);
        ItemName.setText(null);
        price.setText(null);
        total.setText(null);
        lb_date_view.setText(null);
        lb_time_date.setText(null);
        id.setText(null);
        sGgrnIdSearch.setText(null);
        supliername.setText(null);
        suplierId.setText(null);
        sub.setText(null);
        net.setText(null);
        bal.setText(null);
        Dis.setText(null);
        pay.setText(null);
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);


    }//GEN-LAST:event_clearActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        try {

            ResultSet rs = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select g.id,g.date,g.total,g.time,g.discount,g.username,g.nettot,g.supliername,g.suplierid,g.bal,g.payment,"
                    + "gr.itemid,gr.item,gr.itemprice,gr.qty,gr.subtot,gr.grnid from inv_grn g inner join inv_grnreg gr on g.id=gr.grnid where g.id='" + sGgrnIdSearch.getText() + "'");
            while (rs.next()) {

                supliername.setText(rs.getString("g.supliername"));
                suplierId.setText(rs.getString("g.suplierid"));
                lb_date_view.setText(rs.getString("g.date"));
                lb_time_date.setText(rs.getString("g.time"));
                id.setText(rs.getString("g.id"));
                sub.setText(rs.getString("g.total"));
                net.setText(rs.getString("g.nettot"));
                bal.setText(rs.getString("g.bal"));
                Dis.setText(rs.getString("g.discount"));
                pay.setText(rs.getString("g.payment"));

                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
                Vector v = new Vector();

                v.add(rs.getString("gr.itemid"));
                v.add(rs.getString("gr.item"));
                v.add(rs.getString("gr.itemprice"));
                v.add(rs.getString("gr.qty"));
                v.add(rs.getString("gr.subtot"));
                dtm.addRow(v);

            }
            rs.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_findActionPerformed

    private void qtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyTyped
        char c = evt.getKeyChar();
        if (!(c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0')) {
            evt.consume();
        }
        if (Character.isLetter(c) || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_qtyKeyTyped

    private void priceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceKeyTyped
        // TODO add your handling code here:

        char c = evt.getKeyChar();
        if (!(c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0')) {
            evt.consume();
        }
        if (Character.isLetter(c) || c == '-') {
            evt.consume();
        }
    }//GEN-LAST:event_priceKeyTyped

    private void payKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_payKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0')) {
            evt.consume();
        }
    }//GEN-LAST:event_payKeyTyped

    private void DisKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DisKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!(c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' || c == '0')) {
            evt.consume();
        }
    }//GEN-LAST:event_DisKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Dis;
    private javax.swing.JTextField ItemName;
    private javax.swing.JScrollPane SGrnId;
    private javax.swing.JList SuplierNameSearch;
    private javax.swing.JTextField bal;
    private javax.swing.JButton clear;
    private javax.swing.JButton find;
    private javax.swing.JTextField id;
    private javax.swing.JTextField itemNo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField lb_date_view;
    private javax.swing.JTextField lb_time_date;
    private javax.swing.JTextField net;
    private javax.swing.JTextField pay;
    private javax.swing.JTextField price;
    private javax.swing.JTextField qty;
    private javax.swing.JTextField sGgrnIdSearch;
    private javax.swing.JList sGrnId;
    private javax.swing.JTextField sub;
    private javax.swing.JLabel suplierId;
    private javax.swing.JScrollPane suplierNameSearch;
    public javax.swing.JTextField supliername;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables

    private void loadGrnId() {
        try {
            ResultSet rs = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select count(id) as x from inv_grn");
            if (rs.next()) {
                int i = Integer.parseInt(rs.getString("x"));
                ++i;
                id.setText("GRN00" + i);
                ResultSet rs1 = MC_JavaDataBaseConnection.myConnection().createStatement().executeQuery("select id from inv_grn where id='" + id.getText() + "'");
                if (rs1.next()) {
                    ++i;
                    id.setText("GRN00" + i);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadDateAndTime() {
        try {
            showDate();
            showTime();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clear() {
        itemNo.setText(null);
        qty.setText(null);
        ItemName.setText(null);
        price.setText(null);
        total.setText(null);

        itemNo.grabFocus();
    }

    private void caltot() {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        double tot = 0;
        for (int i = 0; i < dtm.getRowCount(); i++) {
            tot += Double.parseDouble(dtm.getValueAt(i, 4).toString());
        }
        sub.setText("" + tot);
    }

    private void addTable() {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        Vector v = new Vector();
        int i;
        int count = -1;
        boolean flag = false;

        try {
            for (i = 0; i < jTable1.getRowCount(); i++) {

                item = dtm.getValueAt(i, 0).toString();

                if (itemNo.getText().equals(item)) {
                    qt = dtm.getValueAt(i, 3).toString();
                    count = i;
                    flag = true;
                    break;
                }

            }

            if (flag) {
                System.out.println(item);
                Double qun = Double.parseDouble(qt) + Double.parseDouble(qty.getText());
                Double tot1 = qun * Double.parseDouble(price.getText());
                dtm.setValueAt(qun, i, 3);
                dtm.setValueAt(tot1, i, 4);
                clear();
                caltot();
            } else {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                v.add(itemNo.getText());
                v.add(ItemName.getText());
                v.add(price.getText());
                v.add(qty.getText());
                v.add(total.getText());
                dtm.addRow(v);

                clear();
                caltot();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearAll() {
        clear();
        supliername.setText(null);
        suplierId.setText(null);
        loadDateAndTime();
        loadGrnId();
        sub.setText(null);
        net.setText(null);
        bal.setText(null);
        Dis.setText(null);
        pay.setText(null);
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);

    }

    void showTime() {
        new Timer(0, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {

                Date d = new Date();
                SimpleDateFormat stim = new SimpleDateFormat("hh:mm:ss a");
                String st = stim.format(d);
                lb_time_date.setText(st);

            }
        }).start();
    }

    void showDate() {
        Date d = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String s = sdf.format(d);
        lb_date_view.setText(s);
        System.out.println(s);

    }

}
